Underwater Communication Cables - Hugo Jenkins + Boary, Kaitlin Ho + Apple, Sophie Eiden + Rabby
APCS pd 6
HW69 -- Making Sense
2022-03-02
time spent: 1hr

q0: From any starting position, can an open tour always be found? Explain.
-From any starting position an open tour cannot always be found. We tested it on a 5x5 board from row 1, column 2.
q1: Same, but for closed tour.
-From any starting position a closed tour can always be found. There is always one possible closed tour for a board and once the end of a closed tour is reached, it is only one move away from going back to the starting position. From there, the knight would be able to repeat the tour again. If a knight is placed on an arbitrary starting position on the board, by definition, it would be on one of the locations which the knight is on during one of the moves of the closed tour. Once the knight is there, it can proceed down the route of the closed tour and if it comes to the “end” of the tour, it simply goes to the “start” location and continues.
-In a closed Knight’s Tour, the knight touches each square once. Therefore, every square can be a starting point for another closed tour. If there is a closed tour for an nxn board, then a closed tour is possible starting from every position on that board..

q2: How do you explain the increase in execution time as n increases?
-Since the algorithm is a depth probe, an increase of n has an exponential effect, around O(2^n).
q3: Thoughts on optimization?
-A thought: Since the depth probe seems to be slowed by not looking back enough - the knight gets stuck at a small node and spends time checking each of the options. My idea is to have the knight “look back” two iterations per probe. The chance of it missing a solution might be increased - but the time spent probing deep into unworkable paths would be reduced.

State your cleanest algo for finding your way out of a maze (of the “2D” style discussed in class).

Every move, every surrounding cell can be checked to see if its the end, an obstacle, a possible new cell to move to, or the previous cell. If there’s a possible empty cell to go to, move to one of them and repeat this process until there are no more empty cells to move to or the end is reached. If there are no more spaces to move to, a dead end is reached and backtrack to the cell with multiple empty cells to move to. If the end is reached, a solution is found

Recursively check each adjacent position for a dead end or the exit. If a dead end is reached, check the next possible position.


* Mean execution times for boards of size n*n:
 * n=5   1.2198s    across 5 executions
 * n=6   27.8766s   across 5 executions
 * n=7   ~18m       across 5 executions
 * n=8   ~25m       across 5 executions
